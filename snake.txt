/*                                                                         SNAKE GAME 
                                                                                                                                                                                    */
#include <iostream>
#include <conio.h>
#include <stdlib.h>
#include <windows.h>
 using namespace std;
 bool gameover;
 int score=0;
 int tailx[200],taily[200];
 int taillen;
 int prevx,prevy;
 const int width=50;
 const int heigth =20;
 int fruitx,fruity;
 int x,y;
 enum eDirection {STOP =0,UP,DOWN,LEFT,RIGHT};
 eDirection dir;

void setup()
{
	gameover=false;
    x=width/2;
    y=heigth/2;
    fruitx=rand() % width;
    fruity=rand() % heigth;
    char dir=STOP;

}
void layout()
{
     system("cls");  

for(int i=0;i<width+1;i++)
   {
    cout<<"#";
   };

cout<<endl;
for(int j=0;j<heigth;j++)
{
    
    for(int i=0;i<width;i++)
    {
        if(i==0)
       {
        cout<<"#";
       }
       
        if(i==width-1)
        {
        cout<<"#";
        }
        if(i==x&&j==y)
        {
            cout<<"O";
        }
        if(i==fruitx&&j==fruity)
        {
            cout<<"X";
        }
        else
        {
        	bool z=false;
			for(int p=0;p<taillen;p++)
        	{
        		
        		if(tailx[p]==i&&taily[p]==j)
        		{
        			cout<<"o";
        			z=true;
				};
			};
			if(!z)
			{
             cout<<" " ;
            }
        }
    }
cout<<endl;
};
for(int i=0;i<width+1;i++)
{
    cout<<"#";
};
cout<<endl;
cout<< "score is = " << score;
}
void input()
{
if(kbhit())
{
    
    switch (getch())
    {
        case 'w':
        {
            dir=UP;
            break;
        }
        case 'a':
        {
            
            dir=LEFT;
            break;
        }
        case 's':
        {
            dir=DOWN;
            break;
            
        }
        case 'd':
        {
            dir=RIGHT;
            break;
        }
        case 'x':
        	{
        		gameover=true;
			}
        
    }
    
}
};
void logic()
{
tailx[0]=x;
taily[0]=y;

	prevx=tailx[0];
	prevy=taily[0];
	int prev2x,prev2y;


for(int i=1;i<taillen;i++)
{
prev2x=tailx[i];
prev2y=taily[i];
tailx[i]=prevx;
taily[i]=prevy;
prevx=prev2x;
prevy=prev2y;
}
 switch(dir)
    {
        case UP:
        {
            y--;
            break;
        }
        case DOWN:
        {
            y++;
            break;
        }
        case LEFT:
        {
            x--;
            break;
        }
        case RIGHT:
        {
            x++;
            break;
        }
        
        
    };
    if(x>width||x<0||y>heigth||y<0)
    {
    	gameover=true;
	}
	for(int c=0;c<taillen;c++)
	{
	if(tailx[c]==x&&taily[c]==y)
	{
		gameover=true;
	}
	}
	
	if(x==fruitx&&y==fruity)
	{
		score+=5;
		fruitx=rand() % width;
    fruity=rand() % heigth;
    taillen++;
	}
};


void movement();
int main()
{
	setup();
while(!gameover)
{
layout();
input();
logic();
Sleep(10);
}
};
